package gui;

import comms.Drone;
import comms.MeshServer;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.WindowEvent;
import java.net.Socket;
import java.util.AbstractMap;
import java.util.HashMap;

/**
 * Created by hoo on 20/05/2016.
 */
public class DroneStatus {
    private JTable droneTable;
    private JButton closeButton;
    private JButton killButton;
    private JPanel topPanel;
    private JScrollPane tableScrollPane;
    private static DefaultTableModel model;
    private static JFrame frame;
    private static AbstractMap<String, Drone> drones = new HashMap<>();
    private static final Object lock = new Object();

    public DroneStatus() {

        $$$setupUI$$$();
        killButton.addActionListener(click -> killDrones());
        closeButton.addActionListener(click -> frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING)));
    }

    public static void start() {
        frame = new JFrame("DroneStatus");
        frame.setContentPane(new DroneStatus().topPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private void createUIComponents() {

        model = new DefaultTableModel() {
            String[] columns = {"Drone ID", "Battery Level", "Kill"};

            @Override
            public int getColumnCount() {
                return columns.length;
            }

            @Override
            public String getColumnName(int index) {
                return columns[index];
            }

            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return Integer.class;
                    case 2:
                        return Boolean.class;
                    default:
                        return String.class;
                }

            }
        };

        droneTable = new JTable(model);
    }

    public static void addDrone(Drone drone) {
        synchronized (lock) {
            model.addRow(new Object[]{drone.getUuid(), drone.getBattery(), false});
            drones.put(drone.getUuid(), drone);
        }
    }

    public static void removeDrone(Drone drone) {
        synchronized (lock) {
            int ind = -1;
            int i = 0;
            while (i != model.getRowCount() && ind != i) {
                if (model.getValueAt(i, 0).equals(drone.getUuid())) {
                    ind = i;
                } else {
                    ++i;
                }
            }
            drones.remove((String) model.getValueAt(i, 0));
            model.removeRow(ind);
        }
    }

    private static void killDrones() {
        synchronized (lock) {
            for (int i = 0; i != model.getRowCount(); ++i) {
                String uuid = (String) model.getValueAt(i, 0);
                drones.get(uuid).setKillComms((boolean) model.getValueAt(i, 2));
            }
        }
    }

    public static void terminate() {
        frame.dispatchEvent(new WindowEvent(frame, WindowEvent.WINDOW_CLOSING));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        topPanel = new JPanel();
        topPanel.setLayout(new GridBagLayout());
        tableScrollPane = new JScrollPane();
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 3;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        topPanel.add(tableScrollPane, gbc);
        tableScrollPane.setViewportView(droneTable);
        killButton = new JButton();
        killButton.setText("Kill Selected Drones");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(killButton, gbc);
        closeButton = new JButton();
        closeButton.setText("Close");
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(closeButton, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        topPanel.add(spacer1, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return topPanel;
    }
}
